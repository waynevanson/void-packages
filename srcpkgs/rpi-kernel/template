# Template file for 'rpi-kernel'
#
# We track the latest Raspberry Pi LTS kernel as that is what is used in the
# official Raspbian distribution. This is currently 5.4:
#
#   https://www.raspberrypi.org/forums/viewtopic.php?f=29&t=269769

_githash="76c49e60e742d0bebd798be972d67dd3fd007691"
_gitshort="${_githash:0:7}"

pkgname=rpi-kernel
version=5.4.83
revision=2
build_style=meta
archs="armv6l* armv7l* aarch64*"
wrksrc="linux-${_githash}"
hostmakedepends="perl kmod uboot-mkimage libressl-devel bc bison flex"
maintainer="Piraty <piraty1@inbox.ru>"
homepage="http://www.kernel.org"
license="GPL-2.0-only"
short_desc="Linux kernel for Raspberry Pi - transitional dummy package"
distfiles="https://github.com/raspberrypi/linux/archive/${_githash}.tar.gz"
checksum=4a98ea0d68c6e74d479789c12fc97619c872cb2607ae87a881a9491c1c3fbc35
python_version=2

_kernver="${version}_${revision}"

nodebug=yes
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes

# RPi, RPi2, RPi3
archs="armv6l* armv7l* aarch64*"
hostmakedepends="perl kmod uboot-mkimage openssl-devel bc bison flex"
makedepends="ncurses-devel"
triggers="kernel-hooks"
_mutable_files="
	/usr/lib/modules/${_kernver}/modules.dep
	/usr/lib/modules/${_kernver}/modules.dep.bin
	/usr/lib/modules/${_kernver}/modules.symbols
	/usr/lib/modules/${_kernver}/modules.symbols.bin
	/usr/lib/modules/${_kernver}/modules.alias
	/usr/lib/modules/${_kernver}/modules.alias.bin
	/usr/lib/modules/${_kernver}/modules.devname"

_arch=
case "$XBPS_TARGET_MACHINE" in
	arm*) _arch=arm ;;
	aarch64*) _arch=arm64 ;;
esac
_cross=
if [ "$CROSS_BUILD" ]; then
	_cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
fi

subpackages="rpi-kernel-headers"

# handle all raspberry pi flavors
case "$XBPS_TARGET_MACHINE" in
	armv6*) _flavors=rpi1 ;;
	armv7*) _flavors=rpi2 ;;
	aarch64*) _flavors="rpi3 rpi4" ;;
esac

for _flavor in $_flavors; do
	subpackages+=" ${_flavor}-kernel-headers ${_flavor}-kernel"
done

# support legacy installations (before rpi4 was added)
# meta package depend on the flavor package so the kernel doesn't end up orphaned
# !! don't drop before 2022-02 !!
case "$XBPS_TARGET_MACHINE" in
	armv6*) depends=rpi1-kernel ;;
	armv7*) depends=rpi2-kernel ;;
	aarch64*) depends=rpi3-kernel ;;
esac

_flavor_stage() {
	stage="$1"

	for _flavor in $_flavors ; do
		msg_normal "$_flavor: $stage\n"
		(
		case "$stage" in
			pre_configure)
				# copy extraced sources to flavor specific dir
				msg_normal "$_flavor: prepare build dir, please wait...\n"
				cp -a "$wrksrc" "$wrksrc/../$_flavor"
				;;
			configure)
				cd "$wrksrc/../$_flavor"
				_configure $_flavor
				;;
			build)
				cd "$wrksrc/../$_flavor"
				_build
				;;
			install)
				cd "$wrksrc/../$_flavor"
				_install $_flavor
				mv "$DESTDIR" "$DESTDIR/../$_flavor"
				mkdir -p "$DESTDIR"
				;;
		esac
		)
	done
}

_flavor_subpkg_install_kernel() {
	(
		export DESTDIR="$DESTDIR/../$1"
		vmove /boot
		vmove /usr/lib
	)
}
_flavor_subpkg_install_headers() {
	(
		export DESTDIR="$DESTDIR/../$1"
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	)
}


pre_configure() {
	_flavor_stage pre_configure
}

do_configure() {
	_flavor_stage configure
}

do_build() {
	_flavor_stage build
}

do_install() {
	_flavor_stage install
}

_configure() {
	local rpi_flavor="$1"
	local target defconfig

	# Use upstream's default configuration, no need to maintain ours.
	case "$rpi_flavor" in
		rpi1)
			target=bcmrpi_defconfig
			;;
		rpi2)
			target=bcm2709_defconfig
			;;
		rpi3)
			target=bcmrpi3_defconfig
			;;
		rpi4)
			target=bcm2711_defconfig
			;;
	esac
	defconfig="arch/${_arch}/configs/${target}"

	echo "CONFIG_CONNECTOR=y" >> "$defconfig"
	echo "CONFIG_PROC_EVENTS=y" >> "$defconfig"
	echo "CONFIG_F2FS_FS_SECURITY=y" >> "$defconfig"
	echo "CONFIG_CGROUP_PIDS=y" >> "$defconfig"

	# IR Remote Support
	echo "CONFIG_RC_CORE=y" >> "$defconfig"
	echo "CONFIG_LIRC=y" >> "$defconfig"
	echo "CONFIG_RC_DECODERS=y" >> "$defconfig"
	echo "CONFIG_RC_DEVICES=y" >> "$defconfig"
	echo "CONFIG_IR_RC6_DECODER=m" >> "$defconfig"
	echo "CONFIG_IR_MCEUSB=m" >> "$defconfig"

	# HID Controllers
	echo "CONFIG_HID_STEAM=y" >> "$defconfig"

	# LXD 4.2+ support
	echo "CONFIG_BRIDGE_VLAN_FILTERING=y" >> "$defconfig"

	make ${makejobs} ${_cross} ARCH=${_arch} ${target}

	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	vsed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_${revision}\"|" .config
}

_build() {
	local target

	case "$XBPS_TARGET_MACHINE" in
		arm*)
			target="zImage modules dtbs"
			;;
		aarch64*)
			target="Image modules dtbs"
			;;
	esac

	make ${makejobs} ${_cross} ARCH=${_arch} prepare
	make ${makejobs} ${_cross} ARCH=${_arch} ${target}
}

_install() {
	local rpi_flavor="$1"
	local hdrdest

	# Run depmod after compressing modules.
	vsed -i '2iexit 0' scripts/depmod.sh

	# Install kernel, firmware and modules
	make ${makejobs} ARCH=${_arch} INSTALL_MOD_PATH=${DESTDIR} modules_install

	# Install device tree blobs
	make ${makejobs} ARCH=${_arch} INSTALL_DTBS_PATH=${DESTDIR}/boot dtbs_install

	# move dtb that ended up in /boot/broadcom
	case "$rpi_flavor" in
		rpi3)
			mv ${DESTDIR}/boot/broadcom/bcm{2710,2837}-*.dtb ${DESTDIR}/boot
			;;
		rpi4)
			mv ${DESTDIR}/boot/broadcom/bcm2711-*.dtb ${DESTDIR}/boot
			;;
	esac
	rm -rf ${DESTDIR}/boot/broadcom

	# Generate kernel.img and install it to destdir.
	vmkdir boot
	case "$XBPS_TARGET_MACHINE" in
	aarch64*)
		cp arch/arm64/boot/Image ${DESTDIR}/boot/kernel8.img
		;;
	armv7l*)
		cp arch/arm/boot/zImage ${DESTDIR}/boot/kernel7.img
		;;
	armv6l*)
		cp arch/arm/boot/zImage ${DESTDIR}/boot/kernel.img
		;;
	esac

	hdrdest=${DESTDIR}/usr/src/${sourcepkg}-headers-${_kernver}

	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

	(
	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/${sourcepkg}-headers-${_kernver} build
	)

	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 .config ${hdrdest}/.config
	for file in $(find . -name Kconfig\*); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	for file in $(find arch/${_arch} -name module.lds -o -name Kbuild.platforms -o -name Platform); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	mkdir -p ${hdrdest}/include

	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in acpi asm-generic clocksource config crypto drm generated linux \
		math-emu media net pcmcia scsi sound trace uapi video xen; do
		[ -d include/$i ] && cp -a include/$i ${hdrdest}/include
	done

	# Remove helper binaries built for host,
	# if generated files from the scripts/ directory need to be included,
	# they need to be copied to ${hdrdest} before this step
	if [ "$CROSS_BUILD" ]; then
		make ${makejobs} ARCH=${_arch} _mrproper_scripts
		# remove host specific objects as well
		find scripts -name '*.o' -delete
	fi

	# Copy files necessary for later builds.
	cp Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}
	mkdir -p ${hdrdest}/security/selinux
	cp -a security/selinux/include ${hdrdest}/security/selinux
	mkdir -p ${hdrdest}/tools/include
	cp -a tools/include/tools ${hdrdest}/tools/include
	if [ -d "arch/${_arch}/tools" ]; then
		cp -a arch/${_arch}/tools ${hdrdest}/arch/${_arch}
	fi

	# copy arch includes for external modules
	mkdir -p ${hdrdest}/arch/${_arch}
	cp -a arch/${_arch}/include ${hdrdest}/arch/${_arch}

	mkdir -p ${hdrdest}/arch/${_arch}/kernel
	cp arch/${_arch}/Makefile ${hdrdest}/arch/${_arch}
	cp arch/${_arch}/kernel/asm-offsets.s ${hdrdest}/arch/${_arch}/kernel
	if [ "$_arch" = "arm64" ] ; then
		cp -a arch/${_arch}/kernel/vdso ${hdrdest}/arch/${_arch}/kernel/
	fi

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# add dvb headers for external modules
	mkdir -p ${hdrdest}/include/config/dvb/
	cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

	# Remove unneeded architectures
	# (save the correct one + Kconfig and delete all others)
	mkdir -p arch-backup
	cp -r ${hdrdest}/arch/${_arch} ${hdrdest}/arch/Kconfig arch-backup/
	rm -rf ${hdrdest}/arch
	mv arch-backup ${hdrdest}/arch
	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
	mkdir -p ${hdrdest}/arch/x86/ras
	cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	# Compress all modules with xz to save a few MBs.
	msg_normal "$rpi_flavor: compressing kernel modules with gzip, please wait...\n"
	find ${DESTDIR} -name '*.ko' | xargs -n1 -P0 gzip -9

	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F System.map ${_kernver}
}

# legacy
rpi-kernel-headers_package() {
	short_desc="${short_desc/kernel/kernel headers}"
	build_style=meta
	case "$XBPS_TARGET_MACHINE" in
		armv6*) depends=rpi1-kernel-headers ;;
		armv7*) depends=rpi2-kernel-headers ;;
		aarch64*) depends=rpi3-kernel-headers ;;
	esac
}

rpi1-kernel_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	triggers="$_triggers"
	mutable_files="$_mutable_files"
	short_desc="Linux kernel for Raspberry Pi zero / 1 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_kernel rpi1
	}
}
rpi1-kernel-headers_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	short_desc="Linux kernel headers for Raspberry Pi zero / 1 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_headers rpi1
	}
}

rpi2-kernel_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	triggers="$_triggers"
	mutable_files="$_mutable_files"
	short_desc="Linux kernel for Raspberry Pi 2 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_kernel rpi2
	}
}
rpi2-kernel-headers_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	short_desc="Linux kernel headers for Raspberry Pi 2 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_headers rpi2
	}
}

rpi3-kernel_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	mutable_files="$_mutable_files"
	triggers="$_triggers"
	short_desc="Linux kernel for Raspberry Pi 3 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_kernel rpi3
	}
}
rpi3-kernel-headers_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	short_desc="Linux kernel headers for Raspberry Pi 3 (${version%.*} [git ${_gitshort}])"
	pkg_install() {
		_flavor_subpkg_install_headers rpi3
	}
}

rpi4-kernel_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	mutable_files="$_mutable_files"
	triggers="$_triggers"
	short_desc="Linux kernel for Raspberry Pi 4 (${version%.*} [git ${_gitshort}])"
	conflicts="rpi3-kernel"
	pkg_install() {
		_flavor_subpkg_install_kernel rpi4
	}
}
rpi4-kernel-headers_package() {
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	short_desc="Linux kernel headers for Raspberry Pi 4 (${version%.*} [git ${_gitshort}])"
	conflicts="rpi3-kernel-headers"
	pkg_install() {
		_flavor_subpkg_install_headers rpi4
	}
}
